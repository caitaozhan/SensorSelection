Start GA selection (homo)
cost = 1, time = 1.0628280639648438, best = 37, (16, 3), o_t = 0.0067289951265484494
cost = 2, time = 0.9367761611938477, best = 89, (11, 7), o_t = 0.061287873428942374
cost = 3, time = 0.8946537971496582, best = 29, (17, 6), o_t = 0.1307401234685894
cost = 4, time = 0.8319978713989258, best = 44, (17, 12), o_t = 0.19725981371369328
cost = 5, time = 0.7935965061187744, best = 18, (33, 19), o_t = 0.24932262087962903
cost = 6, time = 0.8253216743469238, best = 49, (1, 16), o_t = 0.32892080158361936
cost = 7, time = 0.8138997554779053, best = 39, (4, 9), o_t = 0.42981572807762064
cost = 8, time = 0.8988628387451172, best = 86, (1, 7), o_t = 0.5720250170688672
cost = 9, time = 0.9807145595550537, best = 35, (13, 26), o_t = 0.6898357040649391
cost = 10, time = 0.9971890449523926, best = 83, (0, 23), o_t = 0.7773499781759461
cost = 11, time = 1.0096020698547363, best = 0, (8, 30), o_t = 0.8438694326510268
cost = 12, time = 0.9563882350921631, best = 16, (4, 18), o_t = 0.8881861369628588
cost = 13, time = 0.9973747730255127, best = 94, (8, 35), o_t = 0.9216021503641502
cost = 14, time = 1.146238088607788, best = 67, (27, 8), o_t = 0.9453799692672027
cost = 15, time = 1.202744960784912, best = 55, (21, 25), o_t = 0.9600895833613643
cost = 16, time = 1.401780128479004, best = 70, (33, 8), o_t = 0.9724216839731551
cost = 17, time = 1.652395486831665, best = 4, (1, 32), o_t = 0.9804038742685994
cost = 18, time = 2.0327765941619873, best = 8, (11, 34), o_t = 0.9866379218265329
cost = 19, time = 2.2275807857513428, best = 60, (24, 37), o_t = 0.9912410450580502
cost = 20, time = 2.399965763092041, best = 92, (28, 11), o_t = 0.9936475023851037
time =  24.063746690750122 
 [[1, 0.0067289951265484494, array([37])], [2, 0.061287873428942374, array([37, 89])], [3, 0.1307401234685894, array([29, 37, 89])], [4, 0.19725981371369328, array([29, 37, 44, 89])], [5, 0.24932262087962903, array([18, 29, 37, 44, 89])], [6, 0.32892080158361936, array([29, 18, 37, 44, 49, 89])], [7, 0.42981572807762064, array([18, 29, 37, 39, 44, 49, 89])], [8, 0.5720250170688672, array([29, 18, 37, 39, 44, 49, 86, 89])], [9, 0.6898357040649391, array([18, 29, 35, 37, 39, 44, 49, 86, 89])], [10, 0.7773499781759461, array([29, 18, 35, 37, 39, 49, 44, 83, 86, 89])], [11, 0.8438694326510268, array([18,  0, 29, 39, 37, 35, 44, 49, 83, 86, 89])], [12, 0.8881861369628588, array([ 0, 16, 18, 37, 35, 29, 39, 44, 49, 83, 86, 89])], [13, 0.9216021503641502, array([16,  0, 18, 37, 35, 29, 39, 49, 44, 83, 86, 89, 94])], [14, 0.9453799692672027, array([ 0, 16, 18, 37, 35, 29, 39, 44, 49, 67, 83, 86, 89, 94])], [15, 0.9600895833613643, array([16,  0, 18, 37, 35, 29, 39, 44, 49, 55, 67, 83, 86, 89, 94])], [16, 0.9724216839731551, array([ 0, 16, 18, 37, 35, 29, 39, 44, 55, 49, 67, 70, 83, 86, 89, 94])], [17, 0.9804038742685994, array([ 0,  4, 37, 18, 35, 29, 39, 44, 16, 49, 55, 67, 70, 83, 86, 89, 94])], [18, 0.9866379218265329, array([ 4,  0,  8, 16, 18, 39, 29, 44, 37, 49, 35, 55, 67, 70, 83, 86, 89,
       94])], [19, 0.9912410450580502, array([35,  4,  8, 16, 18, 39, 29, 44, 37,  0, 49, 55, 60, 67, 70, 83, 86,
       89, 94])], [20, 0.9936475023851037, array([29,  0,  8, 16, 18,  4, 35, 37, 44, 39, 49, 55, 60, 67, 83, 70, 86,
       89, 92, 94])]]
Start GA selection (homo)
cost = 1, time = 0.918628454208374, best = 37, (16, 3), o_t = 0.0067289951265484494
cost = 2, time = 0.8312404155731201, best = 89, (11, 7), o_t = 0.061287873428942374
cost = 3, time = 0.7427618503570557, best = 29, (17, 6), o_t = 0.1307401234685894
cost = 4, time = 0.6797387599945068, best = 44, (17, 12), o_t = 0.19725981371369328
cost = 5, time = 0.6672928333282471, best = 18, (33, 19), o_t = 0.24932262087962903
cost = 6, time = 0.6350977420806885, best = 49, (1, 16), o_t = 0.32892080158361936
cost = 7, time = 0.6125555038452148, best = 39, (4, 9), o_t = 0.42981572807762064
cost = 8, time = 0.595001220703125, best = 86, (1, 7), o_t = 0.5720250170688672
cost = 9, time = 0.5846996307373047, best = 35, (13, 26), o_t = 0.6898357040649391
cost = 10, time = 0.5772960186004639, best = 83, (0, 23), o_t = 0.7773499781759461
cost = 11, time = 0.5659177303314209, best = 0, (8, 30), o_t = 0.8438694326510268
cost = 12, time = 0.5578403472900391, best = 16, (4, 18), o_t = 0.8881861369628588
cost = 13, time = 0.5647923946380615, best = 94, (8, 35), o_t = 0.9216021503641502
cost = 14, time = 0.5875940322875977, best = 67, (27, 8), o_t = 0.9453799692672027
cost = 15, time = 0.5534167289733887, best = 55, (21, 25), o_t = 0.9600895833613643
cost = 16, time = 0.5434727668762207, best = 70, (33, 8), o_t = 0.9724216839731551
cost = 17, time = 0.5312387943267822, best = 4, (1, 32), o_t = 0.9804038742685994
cost = 18, time = 0.5218596458435059, best = 8, (11, 34), o_t = 0.9866379218265329
cost = 19, time = 0.5121622085571289, best = 60, (24, 37), o_t = 0.9912410450580502
cost = 20, time = 0.5088098049163818, best = 92, (28, 11), o_t = 0.9936475023851037
time =  12.29969048500061 
 [[1, 0.0067289951265484494, array([37])], [2, 0.061287873428942374, array([37, 89])], [3, 0.1307401234685894, array([29, 37, 89])], [4, 0.19725981371369328, array([29, 37, 44, 89])], [5, 0.24932262087962903, array([18, 29, 37, 44, 89])], [6, 0.32892080158361936, array([29, 18, 37, 44, 49, 89])], [7, 0.42981572807762064, array([18, 29, 37, 39, 44, 49, 89])], [8, 0.5720250170688672, array([29, 18, 37, 39, 44, 49, 86, 89])], [9, 0.6898357040649391, array([18, 29, 35, 37, 39, 44, 49, 86, 89])], [10, 0.7773499781759461, array([29, 18, 35, 37, 39, 49, 44, 83, 86, 89])], [11, 0.8438694326510268, array([18,  0, 29, 39, 37, 35, 44, 49, 83, 86, 89])], [12, 0.8881861369628588, array([ 0, 16, 18, 37, 35, 29, 39, 44, 49, 83, 86, 89])], [13, 0.9216021503641502, array([16,  0, 18, 37, 35, 29, 39, 49, 44, 83, 86, 89, 94])], [14, 0.9453799692672027, array([ 0, 16, 18, 37, 35, 29, 39, 44, 49, 67, 83, 86, 89, 94])], [15, 0.9600895833613643, array([16,  0, 18, 37, 35, 29, 39, 44, 49, 55, 67, 83, 86, 89, 94])], [16, 0.9724216839731551, array([ 0, 16, 18, 37, 35, 29, 39, 44, 55, 49, 67, 70, 83, 86, 89, 94])], [17, 0.9804038742685994, array([ 0,  4, 37, 18, 35, 29, 39, 44, 16, 49, 55, 67, 70, 83, 86, 89, 94])], [18, 0.9866379218265329, array([ 4,  0,  8, 16, 18, 39, 29, 44, 37, 49, 35, 55, 67, 70, 83, 86, 89,
       94])], [19, 0.9912410450580502, array([35,  4,  8, 16, 18, 39, 29, 44, 37,  0, 49, 55, 60, 67, 70, 83, 86,
       89, 94])], [20, 0.9936475023851037, array([29,  0,  8, 16, 18,  4, 35, 37, 44, 39, 49, 55, 60, 67, 83, 70, 86,
       89, 92, 94])]]
Wrote profile results to test_selection.py.lprof
Timer unit: 1e-06 s

Total time: 12.2742 s
File: /home/caitao/Project/SensorSelect/select_sensor.py
Function: o_t_host_iter at line 1679

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
  1679                                               @profile
  1680                                               def o_t_host_iter(self, d_dot_of_selected, candidate, d_covariance, d_meanvec, d_results, cuda_kernal, d_lookup_table):
  1681                                                   '''Host code for o_t
  1682                                                      The iteration version of o_t_host. Iteration suggests the current iteration uses results from the previous iterations
  1683                                                      When iteration technique is used, O(B^2) time is reduced to O(1). Same iteration idea is used in o_t_approx_host.
  1684                                                       TYPE = "numba.cuda.cudadrv.devicearray.DeviceNDArray", which cannot be pickled --> cannot exist before using joblib
  1685                                                   Args:
  1686                                                       d_dot_of_selected (TYPE): stores the np.dot(np.dot(pj_pi, sub_cov_inv), pj_pi)) of sensors already selected
  1687                                                                                 in previous iterations. shape=(m, m) where m is the number of hypothesis (grid_len^2)
  1688                                                       candidate (int)         : a candidate sensor index
  1689                                                       d_covariance (TYPE)     : covariance matrix
  1690                                                       d_meanvec (TYPE)        : contains the mean vector of every transmitter
  1691                                                       d_results (TYPE)        : 2D array. save the results for each (i, j) pair of transmitter and sensor's error
  1692                                                       cuda_kernal (cuda_kernals.o_t_approx_kernal2 or o_t_approx_dist_kernal2)
  1693                                                       d_lookup_table (TYPE)   : trade space for time
  1694                                           
  1695                                                   '''
  1696      1810       2011.0      1.1      0.0          n_h = len(self.transmitters)
  1697      1810       1055.0      0.6      0.0          threadsperblock = (self.TPB, self.TPB)
  1698      1810       2887.0      1.6      0.0          blockspergrid_x = math.ceil(n_h/threadsperblock[0])
  1699      1810       1051.0      0.6      0.0          blockspergrid_y = math.ceil(n_h/threadsperblock[1])
  1700      1810        655.0      0.4      0.0          blockspergrid = (blockspergrid_x, blockspergrid_y)
  1701                                           
  1702      1810     424300.0    234.4      3.5          cuda_kernal[blockspergrid, threadsperblock](d_meanvec, d_dot_of_selected, candidate, d_covariance, self.grid_priori[0][0], d_lookup_table, d_results)
  1703                                                   
  1704      1810    6642773.0   3670.0     54.1          results = d_results.copy_to_host()
  1705      1810    5199475.0   2872.6     42.4          return np.sum(results.prod(axis=1)*self.grid_priori[0][0])

